import type { NextPage } from 'next';
import Head from 'next/head';
import { useEffect, useState } from 'react';
import { formatUsersWithPosts } from '../helpers/formatUsers.helper';
import { getUsers, getPosts } from '../services/jsonPlaceholder'
import styles from '../styles/Home.module.css'
import dynamic from 'next/dynamic'
import useFetch from '../hooks/useFetch'

const DynamicComponentWithNoSSR = dynamic(
  () => import('../components/dataViewer'),
  { ssr: false }
)

const Home: NextPage<any> = () => {
  const [users, setUsers] = useState();

  const {
    data: usersData = [],
    loading: usersLoading,
    errors: usersErrors = false,
    refetch: usersRefetch
  } = useFetch(getUsers)
  const {
    data: postsData = [],
    loading: postsLoading,
    errors: postsErrors = false,
    refetch: postsRefetch
  } = useFetch(getPosts)

      const mockArray = Array.from({ length: 10 }).map(() => ({
      date: '2021-11-23T22:41:33.573Z',
      insured: 'devzinho',
      identity: '57089206025',
      product: 'mÃ©dico',
      modality: 'rc',
      status: 'inativo',
    }))

  useEffect(() => {
    if (!usersErrors && !postsErrors) {
      setUsers(formatUsersWithPosts(usersData, postsData))
    }
    console.log('usersData', usersData)
    console.log('postsData', postsData)
  }, [usersData, postsData, usersErrors, postsErrors])

  return (
    <div className={styles.container}>
      <Head>
        <title>Winprovit challenge</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
          <article className={styles.jsonContainer}>
            <DynamicComponentWithNoSSR
              users={users}
              loading={usersLoading || postsLoading}
              hasErrors={usersErrors || postsErrors}
            />
          </article>
         <article className={styles.descriptionContainer}>
          <h1 className={styles.title}>
            Users list page!
          </h1>
          <p>Press "Refresh" button to reload data...</p>
          <button
            disabled={usersLoading || postsLoading}
            onClick={() => {
              usersRefetch();
              postsRefetch();
            }}
          >
            Refresh
          </button>
          </article>
      </main>
    </div>
  );
};

export default Home;
